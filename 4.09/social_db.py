import sqlite3
import bcrypt
from cryptography.fernet import Fernet

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ===
# ‚ö†Ô∏è –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ .env –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–µ
key = Fernet.generate_key()
cipher = Fernet(key)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
conn = sqlite3.connect('social_network.db')
cursor = conn.cursor()

# === –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ===
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    content TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS comments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    post_id INTEGER,
    user_id INTEGER,
    content TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(post_id) REFERENCES posts(id),
    FOREIGN KEY(user_id) REFERENCES users(id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS chats (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    is_group BOOLEAN
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS chat_members (
    chat_id INTEGER,
    user_id INTEGER,
    PRIMARY KEY(chat_id, user_id),
    FOREIGN KEY(chat_id) REFERENCES chats(id),
    FOREIGN KEY(user_id) REFERENCES users(id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER,
    sender_id INTEGER,
    encrypted_message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(chat_id) REFERENCES chats(id),
    FOREIGN KEY(sender_id) REFERENCES users(id)
)
''')

conn.commit()

# === –§—É–Ω–∫—Ü–∏–∏ ===

def register_user(username, password):
    password = password[:72]  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –¥–ª—è bcrypt
    password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    try:
        cursor.execute("INSERT INTO users (username, password_hash) VALUES (?, ?)", (username, password_hash))
        conn.commit()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    except sqlite3.IntegrityError:
        print(f"‚ö†Ô∏è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É–∂–µ –∑–∞–Ω—è—Ç–æ.")


def authenticate_user(username, password):
    cursor.execute("SELECT password_hash FROM users WHERE username = ?", (username,))
    result = cursor.fetchone()
    if result and bcrypt.checkpw(password.encode('utf-8'), result[0]):
        print("üîì –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.")
        return True
    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
    return False


def create_post(user_id, content):
    cursor.execute("INSERT INTO posts (user_id, content) VALUES (?, ?)", (user_id, content))
    conn.commit()


def add_comment(post_id, user_id, content):
    cursor.execute("INSERT INTO comments (post_id, user_id, content) VALUES (?, ?, ?)", (post_id, user_id, content))
    conn.commit()


def create_chat(name, is_group):
    cursor.execute("INSERT INTO chats (name, is_group) VALUES (?, ?)", (name, is_group))
    conn.commit()
    return cursor.lastrowid


def add_member_to_chat(chat_id, user_id):
    cursor.execute("INSERT OR IGNORE INTO chat_members (chat_id, user_id) VALUES (?, ?)", (chat_id, user_id))
    conn.commit()


def send_message(chat_id, sender_id, message):
    encrypted_message = cipher.encrypt(message.encode('utf-8'))
    cursor.execute(
        "INSERT INTO messages (chat_id, sender_id, encrypted_message) VALUES (?, ?, ?)",
        (chat_id, sender_id, encrypted_message.decode('utf-8'))
    )
    conn.commit()


def read_messages(chat_id):
    cursor.execute("SELECT sender_id, encrypted_message, created_at FROM messages WHERE chat_id = ? ORDER BY created_at", (chat_id,))
    messages = cursor.fetchall()
    for sender_id, encrypted_msg, created_at in messages:
        decrypted_msg = cipher.decrypt(encrypted_msg.encode('utf-8')).decode('utf-8')
        print(f"[{created_at}] User {sender_id}: {decrypted_msg}")


def get_user_id(username):
    cursor.execute("SELECT id FROM users WHERE username = ?", (username,))
    result = cursor.fetchone()
    return result[0] if result else None


# === –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ===
if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    register_user("Alice", "password123")
    register_user("Bob", "securepass")
    register_user("Alex", "alpha123")
    register_user("Max", "maxpower")
    register_user("Liza", "lizapass")
    register_user("Mark", "markcool")

    # –ü–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    create_post(1, "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç!")
    add_comment(1, 2, "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç, Alice!")
    create_post(3, "–°–µ–≥–æ–¥–Ω—è —Å–æ–ª–Ω–µ—á–Ω–æ, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—É–ø–µ—Ä ‚òÄÔ∏è")
    add_comment(2, 3, "–°–æ–≥–ª–∞—Å–µ–Ω, –¥–µ–Ω—å –æ—Ç–ª–∏—á–Ω—ã–π!")

    # –ß–∞—Ç Alice –∏ Bob
    chat1 = create_chat("Alice & Bob", False)
    add_member_to_chat(chat1, 1)
    add_member_to_chat(chat1, 2)
    send_message(chat1, 1, "–ü—Ä–∏–≤–µ—Ç, Bob!")
    send_message(chat1, 2, "–ü—Ä–∏–≤–µ—Ç, Alice! –ö–∞–∫ –¥–µ–ª–∞?")
    print("\nüí¨ –°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ Alice & Bob:")
    read_messages(chat1)

    # –ß–∞—Ç Alex –∏ Max
    alex_id = get_user_id("Alex")
    max_id = get_user_id("Max")
    chat2 = create_chat("Alex & Max", False)
    add_member_to_chat(chat2, alex_id)
    add_member_to_chat(chat2, max_id)
    send_message(chat2, alex_id, "–ü—Ä–∏–≤–µ—Ç, –ú–∞–∫—Å! –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–µ–∫—Ç—É?")
    send_message(chat2, max_id, "–î–∞, —É–∂–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª!")
    print("\nüí¨ –°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ Alex & Max:")
    read_messages(chat2)

    # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç (Liza, Mark, Alice)
    group_chat = create_chat("–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞", True)
    add_member_to_chat(group_chat, get_user_id("Liza"))
    add_member_to_chat(group_chat, get_user_id("Mark"))
    add_member_to_chat(group_chat, get_user_id("Alice"))
    send_message(group_chat, get_user_id("Liza"), "–†–µ–±—è—Ç–∞, –¥–µ–¥–ª–∞–π–Ω –∑–∞–≤—Ç—Ä–∞!")
    send_message(group_chat, get_user_id("Mark"), "–Ø —É–∂–µ –≤—Å—ë —Å–¥–∞–ª üòé")
    send_message(group_chat, get_user_id("Alice"), "–ö–ª–∞—Å—Å! –Ø –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞.")
    print("\nüí¨ –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç '–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞':")
    read_messages(group_chat)

    conn.close()
